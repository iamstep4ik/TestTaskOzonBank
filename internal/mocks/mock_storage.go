// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/storage/interface.go -destination=internal/mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/iamstep4ik/TestTaskOzonBank/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AllowComments mocks base method.
func (m *MockStorage) AllowComments(ctx context.Context, authorID string, postID int64, allowed bool) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowComments", ctx, authorID, postID, allowed)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowComments indicates an expected call of AllowComments.
func (mr *MockStorageMockRecorder) AllowComments(ctx, authorID, postID, allowed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowComments", reflect.TypeOf((*MockStorage)(nil).AllowComments), ctx, authorID, postID, allowed)
}

// CreateComment mocks base method.
func (m *MockStorage) CreateComment(ctx context.Context, newComment *model.NewComment) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, newComment)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockStorageMockRecorder) CreateComment(ctx, newComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockStorage)(nil).CreateComment), ctx, newComment)
}

// CreatePost mocks base method.
func (m *MockStorage) CreatePost(ctx context.Context, newPost *model.NewPost) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, newPost)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockStorageMockRecorder) CreatePost(ctx, newPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockStorage)(nil).CreatePost), ctx, newPost)
}

// GetCommentDepth mocks base method.
func (m *MockStorage) GetCommentDepth(ctx context.Context, commentID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentDepth", ctx, commentID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentDepth indicates an expected call of GetCommentDepth.
func (mr *MockStorageMockRecorder) GetCommentDepth(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentDepth", reflect.TypeOf((*MockStorage)(nil).GetCommentDepth), ctx, commentID)
}

// GetCommentsForPost mocks base method.
func (m *MockStorage) GetCommentsForPost(ctx context.Context, postID, offset, limit int64) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsForPost", ctx, postID, offset, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsForPost indicates an expected call of GetCommentsForPost.
func (mr *MockStorageMockRecorder) GetCommentsForPost(ctx, postID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsForPost", reflect.TypeOf((*MockStorage)(nil).GetCommentsForPost), ctx, postID, offset, limit)
}

// GetPost mocks base method.
func (m *MockStorage) GetPost(ctx context.Context, id int64) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost.
func (mr *MockStorageMockRecorder) GetPost(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockStorage)(nil).GetPost), ctx, id)
}

// GetPosts mocks base method.
func (m *MockStorage) GetPosts(ctx context.Context) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockStorageMockRecorder) GetPosts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockStorage)(nil).GetPosts), ctx)
}

// GetRepliesByParentID mocks base method.
func (m *MockStorage) GetRepliesByParentID(ctx context.Context, parentID, offset, limit int64) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepliesByParentID", ctx, parentID, offset, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepliesByParentID indicates an expected call of GetRepliesByParentID.
func (mr *MockStorageMockRecorder) GetRepliesByParentID(ctx, parentID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepliesByParentID", reflect.TypeOf((*MockStorage)(nil).GetRepliesByParentID), ctx, parentID, offset, limit)
}
