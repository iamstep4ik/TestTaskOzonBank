package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/iamstep4ik/TestTaskOzonBank/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, postInput model.NewPost) (*model.Post, error) {
	post, err := r.PostService.CreatePost(ctx, &postInput)
	if err != nil {
		return nil, fmt.Errorf("failed to create post: %w", err)
	}
	return post, nil
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, commentInput model.NewComment) (*model.Comment, error) {
	comment, err := r.CommentService.CreateComment(ctx, &commentInput)
	if err != nil {
		return nil, fmt.Errorf("failed to create comment: %w", err)
	}
	r.SubscriptionService.Publish(comment.PostID, comment)
	return comment, nil
}

// UpdateAllowComments is the resolver for the updateAllowComments field.
func (r *mutationResolver) UpdateAllowComments(ctx context.Context, postID int64, authorID uuid.UUID, commentsAllowed bool) (*model.Post, error) {
	post, err := r.PostService.AllowComments(ctx, authorID.String(), postID, commentsAllowed)
	if err != nil {
		return nil, fmt.Errorf("failed to update allow comments: %w", err)
	}
	return post, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *model.Post, offset *int64, limit *int64) ([]*model.Comment, error) {
	defaultLimit := int64(20)
	defaultOffset := int64(0)
	if limit == nil {
		limit = &defaultLimit
	}
	if offset == nil {
		offset = &defaultOffset
	}
	comments, err := r.PostService.GetCommentsForPost(ctx, obj.ID, *offset, *limit)
	if err != nil {
		return nil, fmt.Errorf("failed to get comments for post: %w", err)
	}
	return comments, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts, err := r.PostService.GetPosts(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get posts: %w", err)
	}
	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, postID int64) (*model.Post, error) {
	post, err := r.PostService.GetPost(ctx, postID)
	if err != nil {
		return nil, fmt.Errorf("failed to get post: %w", err)
	}
	return post, nil
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID int64) (<-chan *model.Comment, error) {
	ch := make(chan *model.Comment, 1)
	r.SubscriptionService.Subscribe(postID, ch)

	go func() {
		<-ctx.Done()
		r.SubscriptionService.Unsubscribe(postID, ch)
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
